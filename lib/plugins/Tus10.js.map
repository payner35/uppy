{"version":3,"sources":["../../src/plugins/Tus10.js"],"names":["Plugin","require","tus","UppySocket","Utils","tusDefaultOptions","endpoint","resume","onProgress","onChunkComplete","onSuccess","onError","headers","chunkSize","Infinity","withCredentials","uploadUrl","uploadSize","overridePatchMethod","retryDelays","module","exports","core","opts","type","id","title","defaultOptions","allowPause","autoRetry","handlePauseAll","bind","handleResumeAll","handleUpload","pauseResume","action","fileID","updatedFiles","getState","files","inProgressUpdatedFiles","Object","keys","filter","file","progress","uploadComplete","uploadStarted","wasPaused","isPaused","updatedFile","setState","forEach","upload","current","total","log","resolve","reject","optsTus","err","emitter","emit","bytesUploaded","bytesTotal","uploader","url","name","metadata","meta","Upload","data","onFileRemove","abort","onPause","start","onPauseAll","onResumeAll","on","uploadRemote","remote","fetch","method","credentials","body","JSON","stringify","protocol","size","then","res","status","statusText","json","token","host","getSocketHost","socket","target","send","progressData","emitSocketProgress","close","cb","targetFileID","uploadFiles","length","index","parseInt","isRemote","selectForUpload","filesForUpload","map","bus","once","actions","addResumableUploadsCapabilityFlag","newCapabilities","capabilities","resumableUploads","install","addUploader","uninstall","removeUploader","off"],"mappings":"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","file":"Tus10.js","sourcesContent":["const Plugin = require('./Plugin')\nconst tus = require('tus-js-client')\nconst UppySocket = require('../core/UppySocket')\nconst Utils = require('../core/Utils')\nrequire('whatwg-fetch')\n\n// Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n// excepted we removed 'fingerprint' key to avoid adding more dependencies\nconst tusDefaultOptions = {\n  endpoint: '',\n  resume: true,\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n  headers: {},\n  chunkSize: Infinity,\n  withCredentials: false,\n  uploadUrl: null,\n  uploadSize: null,\n  overridePatchMethod: false,\n  retryDelays: null\n}\n\n/**\n * Tus resumable file uploader\n *\n */\nmodule.exports = class Tus10 extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      resume: true,\n      allowPause: true,\n      autoRetry: true\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.handlePauseAll = this.handlePauseAll.bind(this)\n    this.handleResumeAll = this.handleResumeAll.bind(this)\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  pauseResume (action, fileID) {\n    const updatedFiles = Object.assign({}, this.core.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    switch (action) {\n      case 'toggle':\n        if (updatedFiles[fileID].uploadComplete) return\n\n        const wasPaused = updatedFiles[fileID].isPaused || false\n        const isPaused = !wasPaused\n        let updatedFile\n        if (wasPaused) {\n          updatedFile = Object.assign({}, updatedFiles[fileID], {\n            isPaused: false\n          })\n        } else {\n          updatedFile = Object.assign({}, updatedFiles[fileID], {\n            isPaused: true\n          })\n        }\n        updatedFiles[fileID] = updatedFile\n        this.core.setState({files: updatedFiles})\n        return isPaused\n      case 'pauseAll':\n        inProgressUpdatedFiles.forEach((file) => {\n          const updatedFile = Object.assign({}, updatedFiles[file], {\n            isPaused: true\n          })\n          updatedFiles[file] = updatedFile\n        })\n        this.core.setState({files: updatedFiles})\n        return\n      case 'resumeAll':\n        inProgressUpdatedFiles.forEach((file) => {\n          const updatedFile = Object.assign({}, updatedFiles[file], {\n            isPaused: false\n          })\n          updatedFiles[file] = updatedFile\n        })\n        this.core.setState({files: updatedFiles})\n        return\n    }\n  }\n\n  handlePauseAll () {\n    this.pauseResume('pauseAll')\n  }\n\n  handleResumeAll () {\n    this.pauseResume('resumeAll')\n  }\n\n  /**\n   * Create a new Tus upload\n   *\n   * @param {object} file for use with upload\n   * @param {integer} current file in a queue\n   * @param {integer} total number of files in a queue\n   * @returns {Promise}\n   */\n  upload (file, current, total) {\n    this.core.log(`uploading ${current} of ${total}`)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      const optsTus = Object.assign(\n        {},\n        tusDefaultOptions,\n        this.opts,\n        // Install file-specific upload overrides.\n        file.tus || {}\n      )\n\n      optsTus.onError = (err) => {\n        this.core.log(err)\n        this.core.emitter.emit('core:upload-error', file.id, err)\n        reject('Failed because: ' + err)\n      }\n\n      optsTus.onProgress = (bytesUploaded, bytesTotal) => {\n        this.core.emitter.emit('core:upload-progress', {\n          uploader: this,\n          id: file.id,\n          bytesUploaded: bytesUploaded,\n          bytesTotal: bytesTotal\n        })\n      }\n\n      optsTus.onSuccess = () => {\n        this.core.emitter.emit('core:upload-success', file.id, upload, upload.url)\n\n        if (upload.url) {\n          this.core.log('Download ' + upload.file.name + ' from ' + upload.url)\n        }\n\n        resolve(upload)\n      }\n      optsTus.metadata = file.meta\n\n      const upload = new tus.Upload(file.data, optsTus)\n\n      this.onFileRemove(file.id, () => {\n        this.core.log('removing file:', file.id)\n        upload.abort()\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        isPaused ? upload.abort() : upload.start()\n      })\n\n      this.onPauseAll(file.id, () => {\n        upload.abort()\n      })\n\n      this.onResumeAll(file.id, () => {\n        upload.start()\n      })\n\n      this.core.on('core:retry-started', () => {\n        const files = this.core.getState().files\n        if (files[file.id].progress.uploadComplete ||\n          !files[file.id].progress.uploadStarted ||\n          files[file.id].isPaused\n            ) {\n          return\n        }\n        upload.start()\n      })\n\n      upload.start()\n      this.core.emitter.emit('core:upload-started', file.id, upload)\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    return new Promise((resolve, reject) => {\n      this.core.log(file.remote.url)\n      let endpoint = this.opts.endpoint\n      if (file.tus && file.tus.endpoint) {\n        endpoint = file.tus.endpoint\n      }\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint,\n          protocol: 'tus',\n          size: file.data.size,\n          metadata: file.meta\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        this.core.emitter.emit('core:upload-started', file.id)\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = Utils.getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          this.onFileRemove(file.id, () => {\n            socket.send('pause', {})\n            resolve(`upload ${file.id} was removed`)\n          })\n\n          this.onPause(file.id, (isPaused) => {\n            isPaused ? socket.send('pause', {}) : socket.send('resume', {})\n          })\n\n          this.onPauseAll(file.id, () => {\n            socket.send('pause', {})\n          })\n\n          this.onResumeAll(file.id, () => {\n            socket.send('resume', {})\n          })\n\n          socket.on('progress', (progressData) => Utils.emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            this.core.emitter.emit('core:upload-success', file.id, data, data.url)\n            socket.close()\n            return resolve()\n          })\n        })\n      })\n    })\n  }\n\n  onFileRemove (fileID, cb) {\n    this.core.emitter.on('core:file-remove', (targetFileID) => {\n      if (fileID === targetFileID) cb()\n    })\n  }\n\n  onPause (fileID, cb) {\n    this.core.emitter.on('core:upload-pause', (targetFileID) => {\n      if (fileID === targetFileID) {\n        const isPaused = this.pauseResume('toggle', fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  onPauseAll (fileID, cb) {\n    this.core.emitter.on('core:pause-all', () => {\n      const files = this.core.getState().files\n      if (!files[fileID]) return\n      cb()\n    })\n  }\n\n  onResumeAll (fileID, cb) {\n    this.core.emitter.on('core:resume-all', () => {\n      const files = this.core.getState().files\n      if (!files[fileID]) return\n      cb()\n    })\n  }\n\n  uploadFiles (files) {\n    if (Object.keys(files).length === 0) {\n      this.core.log('no files to upload!')\n      return\n    }\n\n    files.forEach((file, index) => {\n      const current = parseInt(index, 10) + 1\n      const total = files.length\n\n      if (!file.isRemote) {\n        this.upload(file, current, total)\n      } else {\n        this.uploadRemote(file, current, total)\n      }\n    })\n  }\n\n  selectForUpload (files) {\n    // TODO: replace files[file].isRemote with some logic\n    //\n    // filter files that are now yet being uploaded / haven’t been uploaded\n    // and remote too\n    const filesForUpload = Object.keys(files).filter((file) => {\n      if (!files[file].progress.uploadStarted || files[file].isRemote) {\n        return true\n      }\n      return false\n    }).map((file) => {\n      return files[file]\n    })\n\n    this.uploadFiles(filesForUpload)\n  }\n\n  handleUpload () {\n    this.core.log('Tus is uploading...')\n    const files = this.core.getState().files\n\n    this.selectForUpload(files)\n\n    return new Promise((resolve) => {\n      this.core.bus.once('core:upload-complete', resolve)\n    })\n  }\n\n  actions () {\n    this.core.emitter.on('core:pause-all', this.handlePauseAll)\n    this.core.emitter.on('core:resume-all', this.handleResumeAll)\n\n    if (this.opts.autoRetry) {\n      this.core.emitter.on('back-online', () => {\n        this.core.emitter.emit('core:retry-started')\n      })\n    }\n  }\n\n  addResumableUploadsCapabilityFlag () {\n    const newCapabilities = Object.assign({}, this.core.getState().capabilities)\n    newCapabilities.resumableUploads = true\n    this.core.setState({\n      capabilities: newCapabilities\n    })\n  }\n\n  install () {\n    this.addResumableUploadsCapabilityFlag()\n    this.core.addUploader(this.handleUpload)\n    this.actions()\n  }\n\n  uninstall () {\n    this.core.removeUploader(this.handleUpload)\n    this.core.emitter.off('core:pause-all', this.handlePauseAll)\n    this.core.emitter.off('core:resume-all', this.handleResumeAll)\n  }\n}\n"]}