{"version":3,"sources":["../../../src/plugins/Transloadit/index.js"],"names":["Plugin","require","Client","StatusSocket","module","exports","core","opts","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","waitForEncoding","waitForMetadata","signature","params","fields","locale","prepareUpload","bind","afterUpload","Error","JSON","parse","err","message","auth","key","client","createAssembly","log","files","state","expectedFiles","Object","keys","reduce","count","fileID","progress","uploadStarted","isRemote","then","assembly","updateState","attachAssemblyMetadata","file","meta","assembly_url","filename","name","fieldname","tus","endpoint","tus_url","filesObj","forEach","setState","connectSocket","catch","emit","shouldWait","findFile","uploadedFile","hasOwnProperty","uploadURL","tus_upload_url","onFileUploadComplete","bus","onResult","stepName","result","original_id","localId","results","concat","socket","websocket_url","on","assemblyReady","resolve","reject","close","getAssemblyStatus","assembly_ssl_url","install","addPreProcessor","addPostProcessor","uninstall","removePreProcessor","removePostProcessor","newState","transloadit"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst Client = require('./Client')\nconst StatusSocket = require('./Socket')\n\n/**\n * Upload files to Transloadit using Tus.\n */\nmodule.exports = class Transloadit extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Transloadit'\n    this.title = 'Transloadit'\n\n    const defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create assembly',\n        encoding: 'Encoding...'\n      }\n    }\n\n    const defaultOptions = {\n      waitForEncoding: false,\n      waitForMetadata: false,\n      signature: null,\n      params: null,\n      fields: {},\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.afterUpload = this.afterUpload.bind(this)\n\n    if (!this.opts.params) {\n      throw new Error('Transloadit: The `params` option is required.')\n    }\n\n    let params = this.opts.params\n    if (typeof params === 'string') {\n      try {\n        params = JSON.parse(params)\n      } catch (err) {\n        // Tell the user that this is not an Uppy bug!\n        err.message = 'Transloadit: The `params` option is a malformed JSON string: ' +\n          err.message\n        throw err\n      }\n    }\n\n    if (!params.auth || !params.auth.key) {\n      throw new Error('Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/accounts/credentials.')\n    }\n\n    this.client = new Client()\n  }\n\n  createAssembly () {\n    this.core.log('Transloadit: create assembly')\n\n    const files = this.core.state.files\n    const expectedFiles = Object.keys(files).reduce((count, fileID) => {\n      if (!files[fileID].progress.uploadStarted || files[fileID].isRemote) {\n        return count + 1\n      }\n      return count\n    }, 0)\n\n    return this.client.createAssembly({\n      params: this.opts.params,\n      fields: this.opts.fields,\n      expectedFiles,\n      signature: this.opts.signature\n    }).then((assembly) => {\n      this.updateState({ assembly })\n\n      function attachAssemblyMetadata (file, assembly) {\n        // Attach meta parameters for the Tus plugin. See:\n        // https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n        // TODO Should this `meta` be moved to a `tus.meta` property instead?\n        // If the MetaData plugin can add eg. resize parameters, it doesn't\n        // make much sense to set those as upload-metadata for tus.\n        const meta = Object.assign({}, file.meta, {\n          assembly_url: assembly.assembly_url,\n          filename: file.name,\n          fieldname: 'file'\n        })\n        // Add assembly-specific Tus endpoint.\n        const tus = Object.assign({}, file.tus, {\n          endpoint: assembly.tus_url\n        })\n        return Object.assign(\n          {},\n          file,\n          { meta, tus }\n        )\n      }\n\n      const filesObj = this.core.state.files\n      const files = {}\n      Object.keys(filesObj).forEach((id) => {\n        files[id] = attachAssemblyMetadata(filesObj[id], assembly)\n      })\n\n      this.core.setState({ files })\n\n      return this.connectSocket()\n    }).then(() => {\n      this.core.log('Transloadit: Created assembly')\n    }).catch((err) => {\n      this.core.emit('informer', this.opts.locale.strings.creatingAssemblyFailed, 'error', 0)\n\n      // Reject the promise.\n      throw err\n    })\n  }\n\n  shouldWait () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  findFile (uploadedFile) {\n    const files = this.core.state.files\n    for (const id in files) {\n      if (!files.hasOwnProperty(id)) {\n        continue\n      }\n      if (files[id].uploadURL === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n    }\n  }\n\n  onFileUploadComplete (uploadedFile) {\n    const file = this.findFile(uploadedFile)\n    this.updateState({\n      files: Object.assign({}, this.state.files, {\n        [uploadedFile.id]: {\n          id: file.id,\n          uploadedFile\n        }\n      })\n    })\n    this.core.bus.emit('transloadit:upload', uploadedFile)\n  }\n\n  onResult (stepName, result) {\n    const file = this.state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null\n\n    this.updateState({\n      results: this.state.results.concat(result)\n    })\n    this.core.bus.emit('transloadit:result', stepName, result)\n  }\n\n  connectSocket () {\n    this.socket = new StatusSocket(\n      this.state.assembly.websocket_url,\n      this.state.assembly\n    )\n\n    this.socket.on('upload', this.onFileUploadComplete.bind(this))\n\n    if (this.opts.waitForEncoding) {\n      this.socket.on('result', this.onResult.bind(this))\n    }\n\n    this.assemblyReady = new Promise((resolve, reject) => {\n      if (this.opts.waitForEncoding) {\n        this.socket.on('finished', resolve)\n      } else if (this.opts.waitForMetadata) {\n        this.socket.on('metadata', resolve)\n      }\n      this.socket.on('error', reject)\n    })\n\n    return new Promise((resolve, reject) => {\n      this.socket.on('connect', resolve)\n      this.socket.on('error', reject)\n    }).then(() => {\n      this.core.log('Transloadit: Socket is ready')\n    })\n  }\n\n  prepareUpload () {\n    this.core.emit('informer', this.opts.locale.strings.creatingAssembly, 'info', 0)\n    return this.createAssembly().then(() => {\n      this.core.emit('informer:hide')\n    })\n  }\n\n  afterUpload () {\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.shouldWait()) {\n      this.socket.close()\n      return\n    }\n\n    this.core.emit('informer', this.opts.locale.strings.encoding, 'info', 0)\n    return this.assemblyReady.then(() => {\n      return this.client.getAssemblyStatus(this.state.assembly.assembly_ssl_url)\n    }).then((assembly) => {\n      this.updateState({ assembly })\n\n      // TODO set the `file.uploadURL` to a result?\n      // We will probably need an option here so the plugin user can tell us\n      // which result to pick…?\n\n      this.core.emit('informer:hide')\n    }).catch((err) => {\n      // Always hide the Informer\n      this.core.emit('informer:hide')\n\n      throw err\n    })\n  }\n\n  install () {\n    this.core.addPreProcessor(this.prepareUpload)\n    this.core.addPostProcessor(this.afterUpload)\n\n    this.updateState({\n      assembly: null,\n      files: {},\n      results: []\n    })\n  }\n\n  uninstall () {\n    this.core.removePreProcessor(this.prepareUpload)\n    this.core.removePostProcessor(this.afterUpload)\n  }\n\n  get state () {\n    return this.core.state.transloadit || {}\n  }\n\n  updateState (newState) {\n    const transloadit = Object.assign({}, this.state, newState)\n\n    this.core.setState({ transloadit })\n  }\n}\n"]}