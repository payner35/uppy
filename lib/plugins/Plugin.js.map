{"version":3,"sources":["../../src/plugins/Plugin.js"],"names":["yo","require","nanoraf","findDOMElement","module","exports","core","opts","type","replaceTargetContent","update","bind","mount","focus","install","uninstall","state","el","updateUI","target","plugin","callerPluginName","id","targetElement","render","log","innerHTML","appendChild","Target","targetPluginName","targetPlugin","getPlugin","selectorTarget","addTarget","unmount","parentNode","removeChild"],"mappings":";;;;AAAA,IAAMA,KAAKC,QAAQ,OAAR,CAAX;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;;eAC2BA,QAAQ,eAAR,C;IAAnBE,c,YAAAA,c;;AAER;;;;;;;;;;;AASAC,OAAOC,OAAP;AAEE,kBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,QAAQ,EAApB;AACA,SAAKC,IAAL,GAAY,MAAZ;;AAEA;AACA,SAAKD,IAAL,CAAUE,oBAAV,KAAmC,KAAKF,IAAL,CAAUE,oBAA7C,IAAqE,IAArE;;AAEA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAfH,mBAiBED,MAjBF,mBAiBUM,KAjBV,EAiBiB;AACb,QAAI,OAAO,KAAKC,EAAZ,KAAmB,WAAvB,EAAoC;AAClC;AACD;;AAED,QAAI,KAAKC,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAcF,KAAd;AACD;AACF,GAzBH;;AA2BE;;;;;;;;;;AA3BF,mBAmCEJ,KAnCF,kBAmCSO,MAnCT,EAmCiBC,MAnCjB,EAmCyB;AAAA;;AACrB,QAAMC,mBAAmBD,OAAOE,EAAhC;;AAEA,QAAMC,gBAAgBpB,eAAegB,MAAf,CAAtB;;AAEA;AACA,SAAKD,QAAL,GAAgBhB,QAAQ,UAACc,KAAD,EAAW;AACjC,YAAKC,EAAL,GAAUjB,GAAGU,MAAH,CAAU,MAAKO,EAAf,EAAmB,MAAKO,MAAL,CAAYR,KAAZ,CAAnB,CAAV;AACD,KAFe,CAAhB;;AAIA,QAAIO,aAAJ,EAAmB;AACjB,WAAKjB,IAAL,CAAUmB,GAAV,iBAA4BJ,gBAA5B;;AAEA;AACA,UAAI,KAAKd,IAAL,CAAUE,oBAAd,EAAoC;AAClCc,sBAAcG,SAAd,GAA0B,EAA1B;AACD;;AAED,WAAKT,EAAL,GAAUG,OAAOI,MAAP,CAAc,KAAKlB,IAAL,CAAUU,KAAxB,CAAV;AACAO,oBAAcI,WAAd,CAA0B,KAAKV,EAA/B;;AAEA,aAAOM,aAAP;AACD,KAZD,MAYO;AACL;AACA;AACA,UAAMK,SAAST,MAAf;AACA,UAAMU,mBAAmB,IAAID,MAAJ,GAAaN,EAAtC;;AAEA,WAAKhB,IAAL,CAAUmB,GAAV,iBAA4BJ,gBAA5B,YAAmDQ,gBAAnD;;AAEA,UAAMC,eAAe,KAAKxB,IAAL,CAAUyB,SAAV,CAAoBF,gBAApB,CAArB;AACA,UAAMG,iBAAiBF,aAAaG,SAAb,CAAuBb,MAAvB,CAAvB;;AAEA,aAAOY,cAAP;AACD;AACF,GAtEH;;AAAA,mBAwEEE,OAxEF,sBAwEa;AACT,QAAI,KAAKjB,EAAL,IAAW,KAAKA,EAAL,CAAQkB,UAAvB,EAAmC;AACjC,WAAKlB,EAAL,CAAQkB,UAAR,CAAmBC,WAAnB,CAA+B,KAAKnB,EAApC;AACD;AACF,GA5EH;;AAAA,mBA8EEJ,KA9EF,oBA8EW;AACP;AACD,GAhFH;;AAAA,mBAkFEC,OAlFF,sBAkFa;AACT;AACD,GApFH;;AAAA,mBAsFEC,SAtFF,wBAsFe;AACX;AACD,GAxFH;;AAAA;AAAA","file":"Plugin.js","sourcesContent":["const yo = require('yo-yo')\nconst nanoraf = require('nanoraf')\nconst { findDOMElement } = require('../core/Utils')\n\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @return {array | string} files or success/fail message\n */\nmodule.exports = class Plugin {\n\n  constructor (core, opts) {\n    this.core = core\n    this.opts = opts || {}\n    this.type = 'none'\n\n    // clear everything inside the target selector\n    this.opts.replaceTargetContent === this.opts.replaceTargetContent || true\n\n    this.update = this.update.bind(this)\n    this.mount = this.mount.bind(this)\n    this.focus = this.focus.bind(this)\n    this.install = this.install.bind(this)\n    this.uninstall = this.uninstall.bind(this)\n  }\n\n  update (state) {\n    if (typeof this.el === 'undefined') {\n      return\n    }\n\n    if (this.updateUI) {\n      this.updateUI(state)\n    }\n  }\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {String|Object} target\n   *\n   */\n  mount (target, plugin) {\n    const callerPluginName = plugin.id\n\n    const targetElement = findDOMElement(target)\n\n    // Set up nanoraf.\n    this.updateUI = nanoraf((state) => {\n      this.el = yo.update(this.el, this.render(state))\n    })\n\n    if (targetElement) {\n      this.core.log(`Installing ${callerPluginName} to a DOM element`)\n\n      // clear everything inside the target container\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = ''\n      }\n\n      this.el = plugin.render(this.core.state)\n      targetElement.appendChild(this.el)\n\n      return targetElement\n    } else {\n      // TODO: is instantiating the plugin really the way to roll\n      // just to get the plugin name?\n      const Target = target\n      const targetPluginName = new Target().id\n\n      this.core.log(`Installing ${callerPluginName} to ${targetPluginName}`)\n\n      const targetPlugin = this.core.getPlugin(targetPluginName)\n      const selectorTarget = targetPlugin.addTarget(plugin)\n\n      return selectorTarget\n    }\n  }\n\n  unmount () {\n    if (this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el)\n    }\n  }\n\n  focus () {\n    return\n  }\n\n  install () {\n    return\n  }\n\n  uninstall () {\n    return\n  }\n}\n"]}